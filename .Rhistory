N=100,
M=15,
numTime=100)
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100)
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100)
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100)
library(dpfa)
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100)
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=200,
burnin=100)
traceback()
?array
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=200,
burnin=100)
K=3
numTotal=100
c(K,numTotal)
dim(matrix(0,c(K,numTotal)))
c(K,numTotal)
matrix(0,c(K,numTotal))
niter
niter=2000
burnin=1000
dim(array(NA,c(c(K,numTotal),(niter-burnin))))
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=20,
burnin=10)
dpfa.out
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=20,
burnin=10)
dpfa.out
str(dpfa.out)
dpfa.out$psi_est
dpfa.out$phi_est
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=2000,
burnin=1000)
dpfa.out$psi_est
dpfa.out$phi_est
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=100,
burnin=50)
dpfa.out$psi_est
dpfa.out$phi_est
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=100,
burnin=50)
alpha_phi=1
K1=3
K2=3
matrix(rgamma(K1*K2,shape=alpha_phi),K1,K2)
matrix(rgamma(K1*K2,shape=alpha_phi),K1,K2)
?rdirichlet
rdirichlet(3,diag(1))
rdirichlet(3,diag(3))
rdirichlet(3,diag(3)+.1)
round(rdirichlet(3,diag(3)+.1))
round(rdirichlet(3,diag(3)+.1),3)
round(rdirichlet(3,diag(3)+.1),3)
round(rdirichlet(3,diag(3)+.5),3)
round(rdirichlet(3,diag(3)+.5),3)
round(rdirichlet(3,diag(3)+.2),3)
rdirichlet(3,diag(3)*1.1 - .2)
diag(3)*1.1 - .2
diag(3) + .1
(diag(3) + .1)
1s = matrix(1,K,K)
oness = matrix(1,K,K)
diag(oness) = 0
oness
diag(K)*.9 + ones*.1)
diag(K)*.9 + ones*.1
diag(K)*.9 + oness*.1
diag(K)*.9 + oness*(.1(K-1))
oness*(.1*(K-1))
oness*(.1/(K-1))
diag(K)*.8 + oness*(.2/(K-1))
rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1)))
rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1)))
rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1)))
rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1)))
round(rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1))))
round(rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1))),2)
round(rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1))),2)
round(rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1))),2)
round(rdirichlet(3,diag(K)*.8 + oness*(.2/(K-1))),2)
diag(K)*.8 + oness*(.2/(K-1))
diag(K)*.8 + oness*(.2/(K-1))
library(dpfa)
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=100,
burnin=50)
dpfa.out$psi_est
dpfa.out$phi_est
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=1000,
burnin=500)
dpfa.out$psi_est
dpfa.out$phi_est
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=10000,
burnin=5000)
# vector memory limit at 10000 iters
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=1000,
burnin=500)
library(dpfa)
# vector memory limit at 10000 iters
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=1000,
burnin=500)
rdirichlet(3,matt)
matt = diag(K)*.8 + oness*(.2/(K-1))
rdirichlet(3,matt)
rdirichlet(3,matt)
rdirichlet(3,matt)
library(dpfa)
# vector memory limit at 10000 iters
dpfa.out = dpfa(data,
K=3,
N=100,
M=15,
numTime=100,
niter=1000,
burnin=500)
dpfa.out$psi_est
dpfa.out$phi_est
library(Rcpp)
library(RcppArmadillo)
library(psych)
library(SimDesign)
library(extraDistr)
library(foreach)
library(doParallel)
#registerDoParallel(cores=24)
setwd("/afs/crc.nd.edu/user/s/sshao2/Private/DPFA_Simulation/")
setwd("/Volumes/GoogleDrive/Shared drives/SLAM Lab/ema_text/DFA R/dynamic_pfa/CRC/DPFA_Sim_Cond/")
sourceCpp('helpers.cpp')
source("dynamicPFA_3.R")
source("dynamicPFA_Sim_Cond.R")
source("matrix_to_array.R")
source("sample_Z.R")
source("true_data_Cond1.R")
source("true_data_Cond2.R")
source("true_data_Cond3.R")
true_dat_cond = 3
init_cond_psi = c(1,2,3)
init_con_phi = c(1,2)
init_con_theta = c(1,2)
init_con_W = c(1,2)
init_con_H = 3
K = 3
N = c(30,150)
M = c(15, 150)
numTime = c(10,100)
Rep <-c(1:50)
resfolder <- expand.grid(init_cond_psi,init_con_phi,init_con_theta,
init_con_W,init_con_H,N,M, numTime)
A<-expand.grid(init_cond_psi,init_con_phi,init_con_theta,
init_con_W,init_con_H,N,M, numTime)
#A = subset(A, Var1 == 1 & Var2 ==1 & Var3 == 1 & Var4 ==1 & Var5 ==1&
#         Var6 ==30 & Var7 ==15 & Var8 ==10)
#args<-as.numeric(commandArgs(trailingOnly = TRUE))
args=1
init_cond_psi = 1#A[args,1]
init_con_phi = 1#A[args,2]
init_con_theta = A[args,3]
init_con_W = A[args,4]
init_con_H = A[args,5]
N = 30#A[args,6]
M = 15#A[args,7]
numTime = 100#A[args,8]
#Rep<-A[args,9]
niter = 5000
burnin = 2000
seed <- 1
# keys -- need to estimate W, which has been changed in dynamicPFA_3.R
# testing whether changing psi_tru to diagonal helps
# psi estimation has been off, diagonals should be .7, but come out to be .99  -- might be contributing to correlation
# maybe using wrong prior for psi, alpha_psi -- changing from .1 to 1 helped immensely,
# changed alpha_phi and alpha_psi to 5 from .01 -- 5 was too much, results didn't differentiate among factors
# changed alpha_phi and alpha_psi to 1. Pretty good results, phi still a little off. Tried removing estimation of ZZip, worsened estimation
# changed both in Sim_Cond.R to 1. Get almost exact phi, but psi is less accurate. may just need more iters
res = dynamicPFA_Sim_Cond(true_dat_cond,init_cond_psi,init_con_phi,init_con_theta,init_con_W,init_con_H, K, N, M, numTime, niter, burnin)
names(res) = c("psi_est","phi_est","theta_est","W_est","ZZip_est",
"ZZip_rowsums","psi_est_bias","phi_est_bias","psi_cong","psi_tru",
"phi_tru", "theta_tru", "H_tru","w_tru", "data")
res$psi_est
res$psi_tru
res$phi_est
res$phi_tru
A[args,3]
A[args,4]
A[args,5]
# vector memory limit at 10000 iters
# inits for H need to be all 1's
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=2000,
burnin=1000)
traceback()
library(dpfa)
setwd("/afs/crc.nd.edu/user/s/sshao2/Private/DPFA_Simulation/")
setwd("/Volumes/GoogleDrive/Shared drives/SLAM Lab/ema_text/DFA R/dynamic_pfa/CRC/DPFA_Sim_Cond/")
source("true_data_Cond1.R")
source("true_data_Cond2.R")
source("true_data_Cond3.R")
ret = true_data_Cond3(K=3, numSample=30, M=15, numTime=100)
data = ret[[6]]
# vector memory limit at 10000 iters
# inits for H need to be all 1's
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=2000,
burnin=1000)
dpfa.out$psi_est
dpfa.out$phi_est
# vector memory limit at 10000 iters
# inits for H need to be all 1's
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=5000,
burnin=2000)
dpfa.out$psi_est
dpfa.out$phi_est
# vector memory limit at 10000 iters
# inits for H need to be all 1's
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=5000,
burnin=2000,
init_con_H=1)
dpfa.out$psi_est
dpfa.out$phi_est
dpfa.out$ZZip_est
summary(dpfa.out$ZZip_est)
dim(dpfa.out$ZZip_est)
summary(t(dpfa.out$ZZip_est))
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
traceback()
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=4,
burnin=2,
init_con_H=1)
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=400,
burnin=200,
init_con_H=1)
dpfa.out$psi_est
dpfa.out$phi_est
summary(t(dpfa.out$ZZip_est))
library(dpfa)
library(dpfa)
library(dpfa)
library(dpfa)
library(dpfa)
library(dpfa)
devtools::document()
devtools::document("/Users/rjacobuc/Documents/GitHub/dpfa")
rm(list = c("calcC_kn", "calcTheta", "calcW", "crt_cpp", "matrix_to_array", "mult_cpp", "rztpois_cpp", "rztpois_single", "sample_Z"))
devtools::document("/Users/rjacobuc/Documents/GitHub/dpfa")
library(dpfa)
# vector memory limit at 10000 iters
# need 5000 iters
dpfa.out = dpfa(data,
K=3,
N=30,
M=15,
numTime=100,
niter=40,
burnin=20,
init_con_H=1)
library(dpfa)
library(dpfa)
library(dpfa)
library(dpfa)
